import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "../styles/CreateArticle.css";

const CreateArticle = () => {
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [articleImages, setArticleImages] = useState([]); // Added state for main article images
  const [articleBodies, setArticleBodies] = useState([]);
  const navigate = useNavigate();

  const authorId =
    parseInt(localStorage.getItem("roleId")) === 5
      ? localStorage.getItem("userId")
      : null;

  const handleCreateArticle = async (e) => {
    e.preventDefault();

    if (!authorId) {
      console.error("User không có quyền tạo bài viết!");
      alert("Bạn không có quyền tạo bài viết!");
      return;
    }

    const articlePayload = {
      articleId: 0, // Auto-generated by API
      title,
      content,
      status: "accepted", // Fixed status
      authorId: parseInt(authorId),
      articleImages, // Images for the main article
    };

    try {
      console.log("Sending main article payload to API:", articlePayload);

      // Step 1: Create the main article
      const articleResponse = await axios.post(
        "https://vegetariansassistant-behjaxfhfkeqhbhk.southeastasia-01.azurewebsites.net/api/v1/articles/createArticleByNutritionist",
        articlePayload,
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("authToken")}`,
          },
        }
      );

      console.log("Main article created successfully:", articleResponse.data);

      // Step 2: Fetch all articles by the author to get the latest articleId
      const articlesResponse = await axios.get(
        `https://vegetariansassistant-behjaxfhfkeqhbhk.southeastasia-01.azurewebsites.net/api/v1/articles/getArticleByAuthorId/${authorId}`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("authToken")}`,
          },
        }
      );

      const articles = articlesResponse.data;
      console.log("Fetched articles for the user:", articles);

      if (articles.length === 0) {
        throw new Error("No articles found for the author.");
      }

      // Get the most recent article
      const latestArticle = articles[articles.length - 1];
      console.log("Latest article retrieved:", latestArticle);

      const { articleId } = latestArticle;

      // Step 3: Create article bodies
      for (const [index, body] of articleBodies.entries()) {
        const bodyPayload = {
          bodyId: 0, // Auto-generated by API
          articleId, // Link body to the created article
          content: body.content,
          imageUrl: body.imageUrl,
          position: index + 2, // Position starts at 2 (main article is 1)
          userId: parseInt(authorId),
        };

        console.log(
          `Sending article body payload to API [Index: ${index}]:`,
          bodyPayload
        );

        const bodyResponse = await axios.post(
          "https://vegetariansassistant-behjaxfhfkeqhbhk.southeastasia-01.azurewebsites.net/api/v1/articleBodies/createArticleBody",
          bodyPayload,
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("authToken")}`,
            },
          }
        );

        console.log(
          `Article body created successfully [Index: ${index}]:`,
          bodyResponse.data
        );
      }

      alert("Tạo bài viết và các phần nội dung thành công!");
      navigate("/articles-management");
    } catch (error) {
      console.error("Error during article creation:", error);

      // Detailed error logging
      if (error.response) {
        console.error("Server error response:", error.response.data);
        alert(
          `Error: ${error.response.data.message || "Lỗi khi tạo bài viết."}`
        );
      } else if (error.request) {
        console.error("No response from server:", error.request);
        alert("Không thể kết nối tới server. Vui lòng thử lại sau.");
      } else {
        console.error("Unexpected error:", error.message);
        alert("Đã xảy ra lỗi không xác định. Vui lòng thử lại sau.");
      }
    }
  };

  const handleAddImage = () => {
    setArticleImages((prev) => [...prev, ""]);
  };

  const handleImageChange = (index, value) => {
    setArticleImages((prev) =>
      prev.map((image, i) => (i === index ? value : image))
    );
  };

  const handleAddBody = () => {
    setArticleBodies((prev) => [
      ...prev,
      { content: "", imageUrl: "", position: prev.length + 2 },
    ]);
  };

  const handleBodyChange = (index, field, value) => {
    setArticleBodies((prev) =>
      prev.map((body, i) => (i === index ? { ...body, [field]: value } : body))
    );
  };

  return (
    <div className="create-article-container">
      <h2>Tạo bài viết mới</h2>
      <form onSubmit={handleCreateArticle}>
        <div className="article-input-group">
          <label htmlFor="title">Tiêu đề bài viết</label>
          <input
            type="text"
            id="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Nhập tiêu đề bài viết"
            required
          />
        </div>
        <div className="article-input-group">
          <label htmlFor="content">Nội dung bài viết</label>
          <textarea
            id="content"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Nhập nội dung bài viết"
            required
          />
        </div>
        <div className="article-images">
          <h3>Hình ảnh chính</h3>
          {articleImages.map((image, index) => (
            <div key={index} className="article-image-group">
              <label>URL Hình ảnh:</label>
              <input
                type="text"
                value={image}
                onChange={(e) => handleImageChange(index, e.target.value)}
                placeholder={`Nhập URL hình ảnh ${index + 1}`}
                required
              />
            </div>
          ))}
          <button type="button" onClick={handleAddImage}>
            Thêm hình ảnh
          </button>
        </div>
        <div className="article-bodies">
          <h3>Các phần nội dung khác</h3>
          {articleBodies.map((body, index) => (
            <div key={index} className="article-body-group">
              <h4>Phần {index + 2}</h4>
              <div>
                <label>Nội dung:</label>
                <textarea
                  value={body.content}
                  onChange={(e) =>
                    handleBodyChange(index, "content", e.target.value)
                  }
                  placeholder={`Nhập nội dung phần ${index + 2}`}
                  required
                />
              </div>
              <div>
                <label>URL Hình ảnh:</label>
                <input
                  type="text"
                  value={body.imageUrl}
                  onChange={(e) =>
                    handleBodyChange(index, "imageUrl", e.target.value)
                  }
                  placeholder="Nhập URL hình ảnh (nếu có)"
                />
              </div>
            </div>
          ))}
          <button type="button" onClick={handleAddBody}>
            Thêm nội dung mới
          </button>
        </div>
        <div className="article-create-button">
          <button type="submit">Tạo bài viết</button>
        </div>
      </form>
    </div>
  );
};

export default CreateArticle;
